// Generated by CoffeeScript 1.4.0
/*
Development-Info
The message stanza can contain a subject-tag. No idea, why a chat should have a subject... its more like a pm then
Thread-tags are for now not included, too. (http://tools.ietf.org/html/rfc6121#section-5.2.5)
*/

var Buddy, ChatWindowView, MessageView, Roster, RosterBuddyView, RosterView, StateView, aChat, aChatView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

aChat = (function(_super) {

  __extends(aChat, _super);

  function aChat() {
    this.unsubscribed = __bind(this.unsubscribed, this);

    this.unsubscribe = __bind(this.unsubscribe, this);

    this.subscribed = __bind(this.subscribed, this);

    this.subscribe = __bind(this.subscribe, this);

    this.sendResult = __bind(this.sendResult, this);

    this.initRoster = __bind(this.initRoster, this);

    this.requestRoster = __bind(this.requestRoster, this);

    this.initViews = __bind(this.initViews, this);

    this.onconnect = __bind(this.onconnect, this);

    this.disconnect = __bind(this.disconnect, this);

    this.connect = __bind(this.connect, this);
    return aChat.__super__.constructor.apply(this, arguments);
  }

  _.extend(aChat, Backbone.Events);

  aChat.prototype.initialize = function() {
    this.roster = new Roster(null, this);
    Strophe.addNamespace('CHATSTATES', 'http://jabber.org/protocol/chatstates');
    if (this.get('login')) {
      this.connect();
    }
    if (this.get('debug')) {
      this.initDebug();
    }
    this.initViews();
    return this;
  };

  aChat.VERSION = '15.02.2013';

  aChat.prototype.defaults = {
    jid: null,
    sid: null,
    rid: null,
    pw: null,
    httpbind: 'http-bind/',
    login: false,
    debug: false,
    chatstates: true,
    online: false,
    status: null,
    show: null
  };

  aChat.prototype.con = null;

  aChat.prototype.roster = null;

  aChat.prototype.views = [];

  aChat.prototype.loginTimeout = null;

  aChat.state = {
    OPEN: 1 << 0,
    MINIMIZED: 1 << 1,
    CURRENT: 1 << 2,
    UPDATE: 1 << 3,
    ACTIVE: 1 << 4,
    COMPOSING: 1 << 5,
    PAUSED: 1 << 6,
    INACTIVE: 1 << 7,
    GONE: 1 << 8
  };

  aChat.prototype.connect = function() {
    if (this.get('online')) {
      return this;
    }
    this.con = new Strophe.Connection(this.get('httpbind'));
    if (this.get('jid') && this.get('sid') && this.get('rid')) {
      this.con.attach(this.get('jid'), this.get('sid'), this.get('rid'), this.onconnect);
      this.debug("Attach to session with jid: " + (this.get('jid')) + ", sid: " + (this.get('sid')) + ", rid: " + (this.get('rid')));
    } else if (this.get('jid') && this.get('pw')) {
      this.con.connect(this.get('jid'), this.get('pw'), this.onconnect);
      this.debug("Connect to server with jid: " + (this.get('jid')) + ", pw: " + (this.get('pw')));
    }
    return this;
  };

  aChat.prototype.disconnect = function() {
    if (!this.get('online')) {
      return this;
    }
    this.set('online', false);
    if (this.loginTimeout) {
      clearTimeout(this.loginTimeout);
    }
    this.con.disconnect('offline');
    return this;
  };

  aChat.prototype.onconnect = function(status, error) {
    var _this = this;
    switch (status) {
      case Strophe.Status.ERROR:
        this.debug(error);
        break;
      case Strophe.Status.AUTHENTICATING:
        this.debug('Authenticate');
        break;
      case Strophe.Status.AUTHFAIL:
        this.debug('Authentication failed');
        break;
      case Strophe.Status.CONNECTING:
        this.debug('Connect');
        break;
      case Strophe.Status.CONNFAIL:
        this.debug('Connection failed. Try again in 30s');
        this.loginTimeout = setTimeout(function() {
          return _this.connect();
        }, 1000 * 30);
        break;
      case Strophe.Status.DISCONNECTING:
        this.debug('Abmelden');
        break;
      case Strophe.Status.DISCONNECTED:
        this.debug('Abgemeldet');
        break;
      case Strophe.Status.ATTACHED:
      case Strophe.Status.CONNECTED:
        this.debug('Verbunden');
        this.set('online', true);
        this.con.addHandler((function(msg) {
          _this.debug(msg);
          return true;
        }));
        this.con.addHandler(_.bind(this.handle.message.chat, this), null, 'message', 'chat');
        this.con.addHandler(_.bind(this.handle.message.chat, this), null, 'message', 'normal');
        this.con.addHandler(_.bind(this.handle.message.chatstates, this), Strophe.NS.CHATSTATES, 'message');
        this.con.addHandler(_.bind(this.handle.error, this), null, 'error');
        this.con.addHandler(_.bind(this.handle.iq.get, this), null, 'iq', 'get');
        this.con.addHandler(_.bind(this.handle.iq.set, this), null, 'iq', 'set');
        this.con.addHandler(_.bind(this.handle.presence.unavailable, this), null, 'presence', 'unavailable');
        this.con.addHandler(_.bind(this.handle.presence.subscription, this), null, 'presence');
        this.con.addHandler(_.bind(this.handle.presence.general, this), null, 'presence');
        this.debug('Request Roster');
        this.requestRoster();
    }
    return true;
  };

  aChat.prototype.initViews = function() {
    return this.views.push(new aChatView({
      model: this,
      id: this.get('id')
    }));
  };

  aChat.prototype.requestRoster = function() {
    var id, iq;
    this.con.addHandler(this.initRoster, null, 'iq', 'result', id = this.con.getUniqueId());
    iq = $iq({
      from: this.get('jid'),
      type: 'get',
      id: id
    }).c('query', {
      xmlns: Strophe.NS.ROSTER
    });
    this.con.send(iq);
    return true;
  };

  aChat.prototype.initRoster = function(msg) {
    var buddy, _i, _len, _ref;
    this.debug('Roster arrived');
    this.roster.reset();
    _ref = msg.getElementsByTagName('item');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      buddy = _ref[_i];
      this.roster.add(new Buddy({
        jid: Strophe.getBareJidFromJid(buddy.getAttribute('jid')),
        name: buddy.getAttribute('name'),
        subscription: buddy.getAttribute('subscription'),
        ask: buddy.getAttribute('ask'),
        groups: buddy.getElementsByTagName('group')
      }));
    }
    this.debug('Sending initial Presence!');
    this.con.send($pres({
      from: this.get('jid')
    }));
    return false;
  };

  aChat.prototype.sendResult = function(msg) {
    this.con.send($iq({
      from: this.get('jid'),
      type: 'result',
      id: msg.getAttribute('id')
    }));
  };

  aChat.prototype.subscribe = function(buddy) {
    this.con.send($pres({
      to: Strophe.getBareJidFromJid(buddy.get('jid')),
      type: 'subscribe',
      id: this.con.getUniqueId()
    }));
  };

  aChat.prototype.subscribed = function(buddy) {
    this.con.send($pres({
      to: Strophe.getBareJidFromJid(buddy.get('jid')),
      type: 'subscribed',
      id: this.con.getUniqueId()
    }));
  };

  aChat.prototype.unsubscribe = function(buddy) {
    this.con.send($pres({
      to: Strophe.getBareJidFromJid(buddy.get('jid')),
      type: 'unsubscribe',
      id: this.con.getUniqueId()
    }));
  };

  aChat.prototype.unsubscribed = function(buddy) {
    this.con.send($pres({
      to: Strophe.getBareJidFromJid(buddy.get('jid')),
      type: 'unsubscribed',
      id: this.con.getUniqueId()
    }));
  };

  aChat.prototype.handle = {
    message: {
      chat: function(msg) {
        var body, buddy;
        buddy = this.roster.where({
          jid: Strophe.xmlescape(Strophe.getBareJidFromJid(msg.getAttribute('from')))
        })[0];
        if (!buddy) {
          return true;
        }
        body = msg.getElementsByTagName('body')[0];
        if (body) {
          buddy.trigger('message', Strophe.xmlescape(Strophe.getText(body)));
        }
        return true;
      },
      chatstates: function(msg) {
        var buddy, state;
        buddy = this.roster.where({
          jid: Strophe.xmlescape(Strophe.getBareJidFromJid(msg.getAttribute('from')))
        })[0];
        if (!buddy) {
          return true;
        }
        state = msg.lastElementChild || msg.children[msg.children.length - 1];
        buddy.trigger('chatstate', state.nodeName);
        return true;
      }
    },
    error: function(msg) {
      this.debug(msg);
      return true;
    },
    iq: {
      get: function(msg) {
        if (Strophe.getBareJidFromJid(msg.getAttribute('jid' !== this.jid))) {
          return;
        }
        return true;
      },
      set: function(msg) {
        var buddy, temp, _i, _len, _ref;
        if (Strophe.getBareJidFromJid(msg.getAttribute('jid') !== this.jid)) {
          return true;
        }
        switch (msg.getElementsByTagName('query')[0].getAttribute('xmlns')) {
          case Strophe.NS.ROSTER:
            _ref = msg.getElementsByTagName('item');
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              buddy = _ref[_i];
              if ((temp = this.roster.where({
                jid: Strophe.getBareJidFromJid(buddy.getAttribute('jid'))
              })).length) {
                if (buddy.getAttribute('subscription' === 'remove')) {
                  this.roster.erase(temp[0]);
                  break;
                }
                temp[0].set({
                  jid: Strophe.getBareJidFromJid(buddy.getAttribute('jid')),
                  name: buddy.getAttribute('name'),
                  subscription: buddy.getAttribute('subscription'),
                  ask: buddy.getAttribute('ask'),
                  groups: buddy.getElementsByTagName('group')
                });
              } else {
                this.roster.add(new Buddy({
                  jid: Strophe.getBareJidFromJid(buddy.getAttribute('jid')),
                  name: buddy.getAttribute('name'),
                  subscription: buddy.getAttribute('subscription'),
                  ask: buddy.getAttribute('ask'),
                  groups: buddy.getElementsByTagName('group')
                }));
              }
            }
            this.sendResult(msg);
        }
        this.debug('roster push');
        return true;
      }
    },
    presence: {
      unavailable: function(msg) {
        var buddy;
        buddy = this.roster.where({
          jid: Strophe.getBareJidFromJid(msg.getAttribute('from'))
        })[0];
        if (!buddy) {
          return true;
        }
        buddy.set({
          'online': false,
          'status': Strophe.getText(msg.getElementsByTagName('status')[0]) || null,
          'show': null
        });
        return true;
      },
      subscription: function(msg) {
        var jid;
        if (!msg.getAttribute('type')) {
          return true;
        }
        jid = Strophe.getBareJidFromJid(msg.getAttribute('from'));
        this.trigger(msg.getAttribute('type'), jid);
        return true;
      },
      general: function(msg) {
        var buddy;
        if (msg.getAttribute('type')) {
          return true;
        }
        buddy = this.roster.where({
          jid: Strophe.getBareJidFromJid(msg.getAttribute('from'))
        })[0];
        if (!buddy) {
          return true;
        }
        buddy.set({
          'show': Strophe.getText(msg.getElementsByTagName('show')[0]) || null,
          'status': Strophe.getText(msg.getElementsByTagName('status')[0]) || null
        });
        return true;
      }
    }
  };

  aChat.prototype.initDebug = function() {};

  aChat.prototype.debug = function(msg) {
    if (this.get('debug')) {
      return console.log(msg);
    }
  };

  return aChat;

})(Backbone.Model);

Buddy = (function(_super) {

  __extends(Buddy, _super);

  function Buddy() {
    this.changeChatstate = __bind(this.changeChatstate, this);

    this.checkstate = __bind(this.checkstate, this);

    this.send = __bind(this.send, this);

    this.initView = __bind(this.initView, this);
    return Buddy.__super__.constructor.apply(this, arguments);
  }

  _.extend(Buddy, Backbone.Events);

  Buddy.prototype.initialize = function() {
    var _this = this;
    this.on('message', function(msg) {
      var msgObj;
      _this.initView();
      console.log(msg);
      msgObj = _this.get('msg');
      msgObj[+(new Date)] = msg;
      _this.set('msg', msgObj);
      _this.trigger('change:msg', _this);
      return _this.set('state', _this.get('state') | aChat.state.UPDATE);
    });
    this.on('chatstate', function(state) {
      _this.set('state', _this.get('state') & ~(aChat.state.ACTIVE | aChat.state.COMPOSING | aChat.state.PAUSED | aChat.state.INACTIVE | aChat.state.GONE) | aChat.state[state.toUpperCase()]);
      return console.log(state);
    });
    this.on('change:state', function() {
      var d, i, text, _ref;
      text = '';
      _ref = aChat.state;
      for (i in _ref) {
        d = _ref[i];
        text += i + ': ' + _this.checkstate(d) + '<br />';
      }
      return $('#flags').html(text);
    });
    this.trigger('change:state', this);
    return this;
  };

  Buddy.prototype.initView = function() {
    if (!this.get('view')) {
      this.collection.main.views.push(new ChatWindowView({
        model: this
      }));
      return this.set('state', this.get('state') | aChat.state.OPEN);
    }
  };

  Buddy.prototype.defaults = {
    jid: null,
    name: null,
    subscription: null,
    ask: null,
    groups: [],
    chatstates: false,
    status: null,
    show: null,
    msg: {},
    state: 0,
    view: false,
    currentChatState: aChat.state.ACTIVE
  };

  Buddy.prototype.chatStateTimer = null;

  Buddy.prototype.send = function(msg, chatstate) {
    var XMLmsg, n, state, _ref;
    if (msg == null) {
      msg = '';
    }
    if (chatstate == null) {
      chatstate = aChat.state.ACTIVE;
    }
    if (!this.collection.main.get('online')) {
      return;
    }
    XMLmsg = $msg({
      from: this.collection.main.get('jid'),
      to: this.get('jid'),
      type: 'chat'
    }).c('body').t(msg).up();
    _ref = aChat.state;
    for (state in _ref) {
      n = _ref[state];
      if (n === chatstate) {
        break;
      }
    }
    XMLmsg.c(state.toLowerCase(), {
      xmlns: Strophe.NS.CHATSTATES
    });
    if (msg !== '') {
      this.trigger('message', msg);
    }
    this.collection.main.con.send(XMLmsg);
    return true;
  };

  Buddy.prototype.checkstate = function(state) {
    return (this.get('state') & state) === state;
  };

  Buddy.prototype.changeChatstate = function(state) {
    var futureState, timeoutTime,
      _this = this;
    if (state == null) {
      state = aChat.state.ACTIVE;
    }
    if (state !== this.currentChatState) {
      this.send(null, state);
      this.currentChatState = state;
    }
    if (this.chatStateTimer) {
      clearTimeout(this.chatStateTimer);
    }
    switch (state) {
      case aChat.state.ACTIVE:
        $(document).unbind('mousemove.aChat_chatState');
        futureState = aChat.state.INACTIVE;
        timeoutTime = 120000;
        break;
      case aChat.state.INACTIVE:
        $(document).bind('mousemove.aChat_chatState', function() {
          return _this.changeChatstate(aChat.state.ACTIVE);
        });
        return;
      case aChat.state.GONE:
        return;
      case aChat.state.COMPOSING:
        futureState = aChat.state.PAUSED;
        timeoutTime = 1000;
        break;
      case aChat.state.PAUSED:
        futureState = aChat.state.INACTIVE;
        timeoutTime = 120000;
    }
    this.chatStateTimer = setTimeout((function() {
      return _this.changeChatstate(futureState);
    }), timeoutTime);
    return this;
  };

  return Buddy;

})(Backbone.Model);

Roster = (function(_super) {

  __extends(Roster, _super);

  function Roster() {
    this.erase = __bind(this.erase, this);

    this.create = __bind(this.create, this);
    return Roster.__super__.constructor.apply(this, arguments);
  }

  _.extend(Roster, Backbone.Events);

  Roster.prototype.model = Buddy;

  Roster.prototype.initialize = function(col, main) {
    this.main = main;
  };

  Roster.prototype.create = function(buddyData) {
    var buddy, group, id, iq, _i, _len, _ref;
    this.add(buddy = new Buddy({
      jid: buddyData.jid,
      name: buddyData.name || null,
      subscription: buddyData.subscription || 'none',
      ask: buddyData.ask || 'subscription',
      groups: buddyData.groups || []
    }));
    iq = $iq({
      from: this.main.get('jid'),
      type: 'set',
      id: id = this.main.con.getUniqueId()
    }).c('query', {
      xmlns: Strophe.NS.ROSTER
    }).c('item', {
      jid: buddy.get('jid'),
      name: buddy.get('name')
    });
    _ref = buddy.get('groups');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      group = _ref[_i];
      iq.c('group').t(group).up();
    }
    this.main.debug('Add-Buddy - Request');
    this.collection.main.con.send(iq);
    return buddy;
  };

  Roster.prototype.erase = function(buddy) {
    var id, iq;
    this.remove(buddy);
    iq = $iq({
      from: this.main.get('jid'),
      type: 'set',
      id: id = this.main.con.getUniqueId()
    }).c('query', {
      xmlns: Strophe.NS.ROSTER
    }).c('item', {
      jid: buddy.get('jid'),
      subscription: 'remove'
    });
    this.main.debug('Remove-Buddy - Request');
    this.collection.main.con.send(iq);
    buddy = null;
    return this;
  };

  return Roster;

})(Backbone.Collection);

RosterView = (function(_super) {

  __extends(RosterView, _super);

  function RosterView() {
    this.render = __bind(this.render, this);
    return RosterView.__super__.constructor.apply(this, arguments);
  }

  _.extend(RosterView, Backbone.Events);

  RosterView.prototype.initialize = function() {
    this.listenTo(this.collection, 'add remove', this.render);
    this.listenTo(this.collection.main, 'change:online', this.toggleOnline);
    if (this.collection) {
      this.render();
    }
    return this;
  };

  RosterView.prototype.render = function() {
    var buddy, _i, _len, _ref;
    this.collection.main.debug('render roster');
    this.$el.html('');
    _ref = this.collection.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      buddy = _ref[_i];
      new RosterBuddyView({
        model: buddy,
        el: $('<li>').appendTo(this.$el)
      });
    }
    return true;
  };

  RosterView.prototype.logout = function() {
    return this.collection.main.disconnect();
  };

  RosterView.prototype.toggleOnline = function(e) {};

  return RosterView;

})(Backbone.View);

RosterBuddyView = (function(_super) {

  __extends(RosterBuddyView, _super);

  function RosterBuddyView() {
    this.render = __bind(this.render, this);
    return RosterBuddyView.__super__.constructor.apply(this, arguments);
  }

  _.extend(RosterBuddyView, Backbone.Events);

  RosterBuddyView.prototype.initialize = function() {
    this.listenTo(this.model, 'change:status change:show change:msg', this.render);
    if (this.model) {
      this.render();
    }
    return this;
  };

  RosterBuddyView.prototype.events = {
    'dblclick': 'onDblClickBuddy'
  };

  RosterBuddyView.prototype.render = function() {
    var template;
    this.model.collection.main.debug('render RosterBuddyView');
    _.templateSettings.variable = 'a';
    template = this.model.get('name') || this.model.get('jid').split('@')[0];
    this.$el.html(template);
    return true;
  };

  RosterBuddyView.prototype.onDblClickBuddy = function() {
    this.model.initView();
    return false;
  };

  return RosterBuddyView;

})(Backbone.View);

aChatView = (function(_super) {

  __extends(aChatView, _super);

  function aChatView() {
    this.onMouseMove = __bind(this.onMouseMove, this);

    this.onMouseUp = __bind(this.onMouseUp, this);

    this.onMouseDown = __bind(this.onMouseDown, this);
    return aChatView.__super__.constructor.apply(this, arguments);
  }

  _.extend(aChatView, Backbone.Events);

  aChatView.prototype.initialize = function() {
    this.listenTo(this.model, 'subscribe subscribed unsubscribe unsubscribed', this.info);
    return this.render();
  };

  aChatView.prototype.events = {
    'change select[name="presenceStatus"]': 'onChangePresenceStatus',
    'keydown input[name="presenceShow"]': 'onKeyDownPresenceShow',
    'mousedown .aChatView': 'onMouseDown'
  };

  aChatView.prototype.dragdiff = null;

  aChatView.prototype.info = function(jid) {};

  aChatView.prototype.render = function() {
    var template;
    this.model.debug('render aChatView');
    template = $($.trim($("#aChatView").html()));
    this.model.views.push(new RosterView({
      collection: this.model.roster,
      el: template.find('.RosterView')
    }));
    return this.$el.html(template).appendTo('body');
  };

  aChatView.prototype.onChangePresenceStatus = function() {
    var obj, status;
    status = this.$el.find('select[name="presenceStatus"]').val();
    this.model.set('status', status);
    switch (status) {
      case 'online':
        return this.model.connect();
      case 'offline':
        return this.model.disconnect();
      default:
        obj = {
          status: status
        };
        if (this.model.get('show')) {
          obj.show = this.model.get('show');
        }
        return this.model.con.send($pres(obj));
    }
  };

  aChatView.prototype.onKeyDownPresenceShow = function(e) {
    var obj, show;
    e = $.event.fix(e);
    if (e.keyCode === 13) {
      show = this.$el.find('input[name="presenceShow"]').val();
      this.model.set('show', show);
      obj = {
        show: show
      };
      if (this.model.get('status')) {
        obj.status = this.model.get('status');
      }
      return this.model.con.send($pres(obj));
    }
  };

  aChatView.prototype.onMouseDown = function(e) {
    var offset;
    e = $.event.fix(e);
    if (e.target !== this.$el.find('.aChatView')[0]) {
      return true;
    }
    $(document).bind('mouseup.aChat', this.onMouseUp);
    $(document).bind('mousemove.aChat', this.onMouseMove);
    offset = this.$el.find('.aChatView').offset();
    this.dragdiff = {
      x: e.pageX - offset.left,
      y: e.pageY - offset.top
    };
    return false;
  };

  aChatView.prototype.onMouseUp = function(e) {
    e = $.event.fix(e);
    if (e.target !== this.$el.find('.aChatView')[0]) {
      return true;
    }
    if (this.dragdiff) {
      this.dragdiff = null;
    }
    $(document).unbind('.aChat');
    if (this.$el.find('.aChatView').offset().top < 0) {
      this.$el.find('.aChatView').css({
        top: 0
      });
    }
    return false;
  };

  aChatView.prototype.onMouseMove = function(e) {
    if (!this.dragdiff) {
      return true;
    }
    e = $.event.fix(e);
    this.$el.find('.aChatView').css({
      left: e.pageX - this.dragdiff.x,
      top: e.pageY - this.dragdiff.y
    });
    return false;
  };

  return aChatView;

})(Backbone.View);

ChatWindowView = (function(_super) {

  __extends(ChatWindowView, _super);

  function ChatWindowView() {
    this.onMouseMoveState = __bind(this.onMouseMoveState, this);

    this.onMouseMoveHeader = __bind(this.onMouseMoveHeader, this);

    this.onMouseUp = __bind(this.onMouseUp, this);

    this.onMouseDownState = __bind(this.onMouseDownState, this);

    this.onMouseDownHeader = __bind(this.onMouseDownHeader, this);

    this.minimize = __bind(this.minimize, this);

    this.close = __bind(this.close, this);

    this.render = __bind(this.render, this);

    this.handleState = __bind(this.handleState, this);
    return ChatWindowView.__super__.constructor.apply(this, arguments);
  }

  _.extend(ChatWindowView, Backbone.Events);

  ChatWindowView.prototype.initialize = function() {
    this.listenTo(this.model, 'change:state', this.handleState);
    this.$el.addClass('ChatWindowView');
    return this.render();
  };

  ChatWindowView.prototype.events = {
    'keydown .ChatWindowView_msg': 'onKeyDownMsg',
    'click .ChatWindowView_close': 'onClickClose',
    'mousedown .ChatWindowView_header': 'onMouseDownHeader',
    'mousedown .ChatWindowView_state': 'onMouseDownState'
  };

  ChatWindowView.prototype.dragdiff = null;

  ChatWindowView.prototype.handleState = function() {
    var state;
    state = this.model.get('state');
    if (!this.model.checkstate(aChat.state.OPEN)) {
      this.close();
    }
    if (this.model.checkstate(aChat.state.CURRENT)) {
      this.$el.addClass('active');
    } else {
      this.$el.removeClass('active');
    }
    if (this.model.checkstate(aChat.state.UPDATE)) {
      this.$el.addClass('update');
    } else {
      this.$el.removeClass('update');
    }
    if (this.model.checkstate(aChat.state.OPEN && this.model.checkstate(aChat.state.MINIMIZED))) {
      return this.minimize();
    }
  };

  ChatWindowView.prototype.render = function() {
    var $template;
    this.model.collection.main.debug('render ChatWindowView');
    _.templateSettings.variable = "a";
    $template = $(_.template($.trim($("#ChatWindowView").html()), {
      jid: this.model.get('jid')
    }));
    new MessageView({
      el: $template.filter('.ChatWindowView_chat'),
      model: this.model
    });
    new StateView({
      el: $template.filter('.ChatWindowView_state'),
      model: this.model
    });
    this.$el.html($template);
    if (!this.model.get('view')) {
      this.$el.appendTo('#aChat');
      this.model.set('view', true);
    }
    return true;
  };

  ChatWindowView.prototype.close = function() {
    this.$el.remove();
    this.model.set('view', false);
    this.model.collection.main.trigger('removeView', this);
    return false;
  };

  ChatWindowView.prototype.minimize = function() {
    return true;
  };

  ChatWindowView.prototype.onClickMinimize = function() {
    return this.model.set('state', this.get('state') | aChat.state.MINIMIZED & ~aChat.state.CURRENT);
  };

  ChatWindowView.prototype.onClickClose = function() {
    this.model.set('state', 0);
    return this.model.changeChatstate(aChat.state.GONE);
  };

  ChatWindowView.prototype.onKeyDownMsg = function(e) {
    this.model.changeChatstate(aChat.state.COMPOSING);
    if (e.keyCode === 13) {
      if (e.ctrlKey) {
        e.target.value = e.target.value + "\n";
        return false;
      }
      this.model.send(e.target.value);
      e.target.value = '';
      return false;
    }
  };

  ChatWindowView.prototype.onMouseDownHeader = function(e) {
    var offset;
    e = $.event.fix(e);
    $(document).bind('mouseup.aChat', this.onMouseUp);
    $(document).bind('mousemove.aChat', this.onMouseMoveHeader);
    offset = this.$el.offset();
    this.dragdiff = {
      x: e.pageX - offset.left,
      y: e.pageY - offset.top
    };
    return false;
  };

  ChatWindowView.prototype.onMouseDownState = function(e) {
    var offset;
    e = $.event.fix(e);
    $(document).bind('mouseup.aChat', this.onMouseUp);
    $(document).bind('mousemove.aChat', this.onMouseMoveState);
    offset = $(e.target).offset();
    this.dragdiff = {
      x: e.pageX - offset.left,
      y: e.pageY - offset.top
    };
    return false;
  };

  ChatWindowView.prototype.onMouseUp = function(e) {
    if (this.dragdiff) {
      this.dragdiff = null;
    }
    $(document).unbind('.aChat');
    if (this.$el.offset().top < 0) {
      this.$el.css({
        top: 0
      });
    }
    return false;
  };

  ChatWindowView.prototype.onMouseMoveHeader = function(e) {
    if (!this.dragdiff) {
      return true;
    }
    e = $.event.fix(e);
    this.$el.css({
      left: e.pageX - this.dragdiff.x,
      top: e.pageY - this.dragdiff.y
    });
    return false;
  };

  ChatWindowView.prototype.onMouseMoveState = function(e) {
    var offset;
    if (!this.dragdiff) {
      return true;
    }
    e = $.event.fix(e);
    offset = this.$el.find('.ChatWindowView_chat').offset();
    this.$el.find('.ChatWindowView_chat').css({
      height: (e.pageY - offset.top) - this.dragdiff.y - 20
    });
    return false;
  };

  return ChatWindowView;

})(Backbone.View);

MessageView = (function(_super) {

  __extends(MessageView, _super);

  function MessageView() {
    this.render = __bind(this.render, this);
    return MessageView.__super__.constructor.apply(this, arguments);
  }

  _.extend(MessageView, Backbone.Events);

  MessageView.prototype.initialize = function() {
    this.listenTo(this.model, 'change:msg', this.render);
    return this;
  };

  MessageView.prototype.render = function() {
    var $template;
    this.model.collection.main.debug('render MessageView');
    _.templateSettings.variable = "a";
    $template = _.template($("#ChatWindowView_chat").html(), this.model.get('msg'));
    this.$el.html($template);
    return true;
  };

  return MessageView;

})(Backbone.View);

StateView = (function(_super) {

  __extends(StateView, _super);

  function StateView() {
    this.render = __bind(this.render, this);
    return StateView.__super__.constructor.apply(this, arguments);
  }

  _.extend(StateView, Backbone.Events);

  StateView.prototype.initialize = function() {
    return this.listenTo(this.model, 'change:state', this.render);
  };

  StateView.prototype.render = function() {
    var text;
    this.model.collection.main.debug('render StateView');
    text = '';
    if (this.model.checkstate(aChat.state.COMPOSING)) {
      text = 'composing';
    }
    if (this.model.checkstate(aChat.state.PAUSED)) {
      text = 'paused';
    }
    if (this.model.checkstate(aChat.state.INACTIVE)) {
      text = 'inactive';
    }
    if (this.model.checkstate(aChat.state.GONE)) {
      text = 'has left the chat';
    }
    return this.$el.html(text);
  };

  return StateView;

})(Backbone.View);

$(function() {
  var a;
  return a = new aChat({
    jid: 'admin@localhost',
    pw: 'tree',
    debug: true,
    id: 'aChat'
  });
});
